#version: '2.1'

#services:
#  kafka:
#   image: wurstmeister/kafka:2.12-2.5.0
#   mem_limit: 512m
#   ports:
#    - "9092:9092"
#   environment:
#    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
#    KAFKA_ADVERTISED_HOST_NAME: localhost
#    KAFKA_BOOTSTRAP_SERVERS: "localhost:9092"
#    KAFKA_ADVERTISED_PORT: 9092
#    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#   depends_on:
#     - zookeeper
#
#  zookeeper:
#    image: wurstmeister/zookeeper:3.4.6
#    mem_limit: 512m
#    ports:
#      - "2181:2181"
#    environment:
#      - KAFKA_ADVERTISED_HOST_NAME=zookeeper

#version: '2'
# it works in container but need to expose external port for kafka
#services:
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.1.1
#    networks:
#      - msg_broker
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: "2181"
#
#  kafka:
#    image: confluentinc/cp-kafka:7.1.1
#    networks:
#      - msg_broker
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 0
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
#    depends_on:
#      - zookeeper
#
#  schema-registry:
#    image: confluentinc/cp-schema-registry:7.1.1
#    networks:
#      - msg_broker
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
#      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
#      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
#    depends_on:
#      - kafka
#      - zookeeper
#
#networks:
#  msg_broker:
#    driver: bridge



version: '2.1'
# scheme for client on localhost and broker cluster in docker
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.1
    networks:
      - container_net
    container_name: zookeeper_container
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"

  kafka:
    image: confluentinc/cp-kafka:7.1.1
    networks:
      - container_net
    container_name: kafka_container
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,CONNECTIONS_FROM_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_BOOTSTRAP_SERVERS: "localhost:19092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    depends_on:
      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:7.1.1
    networks:
      - container_net
    container_name: schema-registry_container
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: POST,GET
    depends_on:
      - kafka
      - zookeeper

  mongodb:
    image: mongo:5.0
    networks:
      - container_net
    mem_limit: 512m
    container_name: mongo_container
    ports:
      - "27017:27017"
    command: mongod
    depends_on:
      - kafka
      - zookeeper
      - schema-registry

  postgredb:
    image: postgres:14
    networks:
      - container_net
    mem_limit: 512m
    container_name: postgres_container
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=stock_notification
    healthcheck:
      test: pg_isready -U user -d stock
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  container_net:
    driver: bridge